{"name":"Kimber","tagline":"Simple Kotlin Logging wrapper for Android","body":"A port of the Android Timber library to Kotlin. All credit goes to [Jake Wharton](https://github.com/JakeWharton) as this has begun as a line for line port of his Java code.\r\n\r\nThis is a logger with a small, extensible API which provides utility on top of Android's normal Log class.\r\n\r\nBehavior is added through Tree instances. You can install an instance by calling Kimber.plant. Installation of Trees should be done as early as possible. The onCreate of your application is the most logical choice.\r\n\r\nThe included DebugTree implementation will automatically figure out from which class it's being called and use that class name as its tag. Since the tags vary, it works really well when coupled with a log reader like Pidcat.\r\n\r\n##Usage\r\n\r\nTwo easy steps:\r\n\r\n1. Install any `Tree` instances you want in the `onCreate` of your application class.\r\n2. Call Kimber's static methods everywhere throughout your app.\r\n\r\nCheck out the sample app in `kimber-sample/` to see it in action.\r\n\r\n## Main Differences With [Timber](https://github.com/JakeWharton/timber)\r\nTrees are created as \"Objects\" not Classes using the standard Kotlin format.\r\n```\r\nobject ReleaseTree : Tree() {\r\n        override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {\r\n        // Handle Log calls here\r\n        }\r\n}\r\n```\r\nWhen planting new Trees there is no need to create new instances of the tree, you simply call `Kimber.plant(ReleaseTree)`\r\n\r\n## Whats missing currently\r\n- Unit Tests\r\n- Lint Rules\r\n- Gradle installation\r\n- Any Kotlin black magic that I dont know about","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}